要实现一个线程安全的队列有两种方式：阻塞和非阻塞。
阻塞队列无非就是锁的应用（ArrayBlockingQueue,LinkedBlockingQueue），而非阻塞则是CAS算法的应用。下面我们就开始一个非阻塞算法的研究：CoucurrentLinkedQueue。
ConcurrentLinkedQueue源码分析
1. offer()方法
public boolean offer(E e) {
        //检查节点是否为null
        checkNotNull(e);
        // 创建新节点
        final Node<E> newNode = new Node<E>(e);

        //死循环 直到成功为止
        for (Node<E> t = tail, p = t;;) {
            Node<E> q = p.next;
            // q == null 表示 p已经是最后一个节点了，尝试加入到队列尾
            
            if (q == null) {                                // --- 1
                // casNext：t节点的next指向当前节点
                // casTail：设置tail 尾节点
                // 如果插入失败，则表示其他线程已经在p后面插入了新的节点，则继续循环
                if (p.casNext(null, newNode)) {             // --- 2
                    //每间隔1次（tail和队尾节点的距离为1）才利用CAS更新tail
                    if (p != t)                             // --- 3
                        casTail(t, newNode);                    // --- 4
                    return true;
                }
            }
            // p == q 等于自身
            else if (p == q)                                // --- 5
                
                
                
                // p == q 代表着该节点已经被删除了
                // 由于多线程的原因，我们offer()的时候也会poll()，如果offer()的时候正好该节点已经poll()了
                // 那么在poll()方法中的updateHead()方法会将head指向当前的q，而把p.next指向自己，即：p.next == p
                // 这样就会导致tail节点滞后head（tail位于head的前面），则需要重新设置p
                p = (t != (t = tail)) ? t : head;           // --- 6
            // tail并没有指向尾节点
            else
                // tail已经不是最后一个节点，将p指向最后一个节点
                p = (p != t && t != (t = tail)) ? t : q;    // --- 7
        }
       }
p==q的解释：
如图1是目前队列的快照，如果此时有一个offer线程向队列中添加元素，则t=p=tail=node0。offer线程此时刚好执行在for (Node<E> t = tail, p = t;;)，
此时有一个poll线程，poll线程执行完后的对了状态如图2所示，此时可以发现q=p.next=p。
![图1](./图片/concurrentLinkedQueue2.png)   

![图2](./图片/concurrentLinkedQueue1.png)
p = (p != t && t != (t = tail)) ? t : q; 的解释：
当有多个线程进行添加元素的时候，比如线程1执行的到for (Node<E> t = tail, p = t;;)的时候队列的状态
如图3中的上图，此时线程2执行添加元素操作，连续添加了三个元素后的队列状态如图3中的下图，可以发现此时线程1中的
p==t,t!=tail。所以p=q,q=p.next,q!=null。所以再次执行p = (p != t && t != (t = tail)) ? t : q;
此时p=tail,t=tail了。
![图3](./图片/concurrentLinkedQueue3.png)

实例：<br/>
（1）offer过程<br/>
- 初始化

ConcurrentLinkedQueue初始化时head、tail存储的元素都为null，且head等于tail;
![offer1](./图片/offer1.png)
- 添加元素A

按照程序分析：第一次插入元素A，head = tail = dummyNode，所有q = p.next = null，直接走步骤2：p.casNext(null, newNode)，由于 p == t成立，所以不会执行步骤3：casTail(t, newNode)，直接return。插入A节点后如下：
![offer2](./图片/offer2.png)
- 添加元素B

q = p.next = A ,p = tail = dummyNode，所以直接跳到步骤7：p = (p != t && t != (t = tail)) ? t : q;。此时p = q，然后进行第二次循环 q = p.next = null，步骤2：p == null成立，将该节点插入，因为p = q，t = tail，所以步骤3：p != t 成立，执行步骤4：casTail(t, newNode)，然后return。如下： 
![offer3](./图片/offer3.png)
- 添加元素C

此时t = tail ,p = t，q = p.next = null，和插入元素A无异，如下： 

![offer4](./图片/offer4.png)

（2）poll过程<br/>

public E poll() {
        // 如果出现p被删除的情况需要从head重新开始
        restartFromHead:        // 这是什么语法？真心没有见过
        for (;;) {
            for (Node<E> h = head, p = h, q;;) {

                // 节点 item
                E item = p.item;

                // item 不为null，则将item 设置为null
                if (item != null && p.casItem(item, null)) {                    // --- 1
                    // p != head 则更新head
                    if (p != h)                                                 // --- 2
                        // p.next != null，则将head更新为p.next ,否则更新为p
                        updateHead(h, ((q = p.next) != null) ? q : p);          // --- 3
                    return item;
                }
                // p.next == null 队列为空
                else if ((q = p.next) == null) {                                // --- 4
                    updateHead(h, p);
                    return null;
                }
                // 当一个线程在poll的时候，另一个线程已经把当前的p从队列中删除——将p.next = p，p已经被移除不能继续，需要重新开始
                else if (p == q)                                                // --- 5
                    continue restartFromHead;
                else
                    p = q;                                                      // --- 6
            }
        }
    }
- 初始状态

![poll1](./图片/poll1.png)
- poll A

head = dumy，p = head， item = p.item = null，步骤1不成立，步骤4：(q = p.next) == null不成立，p.next = A，跳到步骤6，下一个循环，此时p = A，所以步骤1 item != null，进行p.casItem(item, null)成功，此时p == A != h，所以执行步骤3：updateHead(h, ((q = p.next) != null) ? q : p)，q = p.next = B != null，则将head CAS更新成B，如下： 
![poll2](./图片/poll2.png)
- poll B

head = B ， p = head = B，item = p.item = B，步骤成立，步骤2：p != h 不成立，直接return，如下：
![poll3](./图片/poll3.png)
- poll C

head = dumy ，p = head = dumy，tiem = p.item = null，步骤1不成立，跳到步骤4：(q = p.next) == null，不成立，然后跳到步骤6，此时，p = q = C，item = C(item)，步骤1成立，所以讲C（item）设置为null，步骤2：p != h成立，执行步骤3：updateHead(h, ((q = p.next) != null) ? q : p)，如下：
![poll4](./图片/poll4.png)
